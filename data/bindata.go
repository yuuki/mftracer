// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../data/schema/flows.sql
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DataSchemaFlowsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4d\x0b\x9b\x40\x10\xbd\xfb\x2b\xe6\x16\x05\x0f\x3d\xf4\x16\x28\x6c\x75\xd2\x4a\x74\x93\xea\x0a\xc9\x49\x8c\x6e\xc3\x42\xa2\xe2\x6e\xd2\xbf\x5f\x76\xfd\x8a\xd6\xb6\x81\xd6\x8b\x0b\x33\xf3\xde\xcc\x7b\xcf\x8b\x91\x30\x04\x76\x3e\x22\x7c\xbf\xd5\x3f\xb2\x52\xb4\xbc\x50\xa2\xae\x80\x24\x80\x34\x8d\xc0\xde\xe4\x85\x12\x4f\xbe\x71\x61\xd3\xe4\x52\xea\xa7\xb3\xb5\xac\x61\x94\x7c\x0e\x11\x82\x1d\xd0\x03\x03\x3c\x05\x09\x4b\xa0\xaa\x4b\x2e\xc1\xb6\x00\xc0\xbc\x33\x51\xc2\x45\x5c\x25\x6f\x45\x7e\x33\x8d\x34\x0d\x43\x38\xc6\x41\x44\xe2\x33\xec\xf1\xec\x9a\x5e\xd1\x3c\x3f\x9a\x7f\xc5\xd5\xd8\xd6\x95\x9a\xba\x55\x5d\x49\xf1\x2b\x6f\x27\x10\xef\x2b\x7a\x7b\xb0\x4d\xfd\x13\x7c\x70\x2c\x67\x3b\xac\x96\xd2\xe0\x5b\x8a\x10\x50\x1f\x4f\x6b\x1b\x66\x9a\x2f\x33\x93\x07\xda\x2f\x9d\x26\x01\xfd\x02\x17\xd5\x72\x0e\xb6\xae\xbb\x86\xfa\x2f\x07\x6b\xe9\x86\x83\x8d\x8c\xa2\x84\xe5\xf7\x8e\x00\x93\xfa\xf3\x6f\x61\xcd\x5c\x1a\x59\x3f\xda\x82\x67\x83\xd0\xaf\x84\xa2\x9a\x74\x84\x18\x77\x18\x23\xf5\x70\x34\xa8\x1f\x71\xf4\xf9\x3e\x86\xc8\x10\x3c\x92\x78\xc4\xc7\x7e\x1d\x2e\x95\xa8\x72\xcd\x39\x83\xff\x77\xe4\xa2\xae\xaa\xee\x18\x39\x3b\xf4\x77\xf6\xbe\xf6\x6b\x97\x7b\x94\x96\xe7\x8a\xff\x2a\xb5\x12\x77\x2e\x55\x7e\x6f\x26\x1c\x1f\x77\x24\x0d\x19\x78\x69\x1c\x23\x65\x19\x0b\x22\x4c\x18\x89\x8e\x1d\xd2\xa3\x29\xff\x03\x92\x81\xea\x53\x67\x8f\x76\xb9\x0b\x87\xdc\x35\x5d\x5f\x73\xbb\x16\xd8\x1e\x42\x4f\x8e\x56\x1c\x68\x1f\xbc\x59\x68\xdf\x21\xfb\x23\x95\xe1\x58\x84\x6a\x9d\x6a\x05\x7a\x79\xac\xb3\xb5\x7e\x06\x00\x00\xff\xff\x47\xe3\x7a\x8a\x64\x04\x00\x00")

func DataSchemaFlowsSqlBytes() ([]byte, error) {
	return bindataRead(
		_DataSchemaFlowsSql,
		"../data/schema/flows.sql",
	)
}

func DataSchemaFlowsSql() (*asset, error) {
	bytes, err := DataSchemaFlowsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../data/schema/flows.sql", size: 1124, mode: os.FileMode(420), modTime: time.Unix(1521650537, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../data/schema/flows.sql": DataSchemaFlowsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"schema": &bintree{nil, map[string]*bintree{
				"flows.sql": &bintree{DataSchemaFlowsSql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

