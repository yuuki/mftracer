// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../data/schema/flows.sql
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DataSchemaFlowsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xc1\xae\x9b\x30\x10\xbc\xf3\x15\x7b\x0b\x48\x1c\x7a\xe8\x2d\x52\x25\x17\x36\x2d\x0a\x38\x29\x18\x29\x39\x21\x02\x6e\x64\x29\x01\x84\x9d\xb4\x9f\x5f\xd9\x40\x08\x29\xd1\xcb\xd3\x7b\x5c\xb0\xb4\xbb\x33\xb3\x33\xeb\xc5\x48\x18\x02\xdb\x6f\x11\x7e\x9f\xea\x3f\x59\x29\x5a\x5e\x28\x51\x57\x40\x12\x40\x9a\x46\x60\x2f\xf2\x42\x89\x2b\x5f\xb8\xb0\x68\x72\x29\xf5\xd3\x59\x5a\xd6\x30\x4a\xbe\x87\x08\xc1\x0a\xe8\x86\x01\xee\x82\x84\x25\x50\xd5\x25\x97\x60\x5b\x00\x60\xde\x99\x28\xe1\x20\x8e\x92\xb7\x22\x3f\x99\x46\x9a\x86\x21\x6c\xe3\x20\x22\xf1\x1e\xd6\xb8\x77\x4d\xaf\x68\xae\x5f\xcd\xbf\xe2\xea\xd6\xd6\x95\x9a\xba\x55\x5d\x49\xf1\x23\x6f\x47\x10\xef\x27\x7a\x6b\xb0\x4d\xfd\x1b\x7c\x71\x2c\x67\x39\x48\x4b\x69\xf0\x2b\x45\x08\xa8\x8f\xbb\x39\x85\x99\xe6\xcb\xcc\xe4\x86\xf6\xa2\xd3\x24\xa0\x3f\xe0\xa0\x5a\xce\xc1\xd6\x75\xd7\x50\xbf\xb1\xb0\xb6\x6e\x58\xd8\xd8\x28\x4a\x78\xfc\x5e\x31\x60\x74\x7f\xfa\x3d\x44\x33\xb5\x46\xd6\x97\xb6\xe0\xd9\x60\xf4\x3d\xa1\xa8\x46\x1f\x21\xc6\x15\xc6\x48\x3d\xbc\x05\xd4\x8f\x38\x7a\x7d\x1f\x43\x64\x08\x1e\x49\x3c\xe2\x63\x2f\x87\x4b\x25\xaa\x5c\x73\x4e\xe0\x3f\x8e\x5c\xd4\x55\xd5\x2d\x23\x27\x8b\x3e\x8b\xf7\xbe\x5f\xa7\xdc\xa3\xb4\x3c\x57\xfc\x7f\xab\x95\x38\x73\xa9\xf2\x73\x33\xe2\xf8\xb8\x22\x69\xc8\xc0\x4b\xe3\x18\x29\xcb\x58\x10\x61\xc2\x48\xb4\xed\x90\x2e\x4d\xf9\x09\x48\x06\xaa\xbf\x3a\x7b\x1a\x8b\x3b\x67\xa6\x3b\x06\xfe\xe2\xdd\xf6\xa0\x1a\x6b\xbc\x87\x4c\x94\x7f\xb5\xd1\xdd\x15\x4e\x2e\xf8\x9d\x22\x6e\x12\xe6\xb8\x0d\x69\x0f\xf8\x9c\x71\x96\x61\x2a\xc3\x59\x5a\xff\x02\x00\x00\xff\xff\x9d\xbb\x89\x2c\x78\x04\x00\x00")

func DataSchemaFlowsSqlBytes() ([]byte, error) {
	return bindataRead(
		_DataSchemaFlowsSql,
		"../data/schema/flows.sql",
	)
}

func DataSchemaFlowsSql() (*asset, error) {
	bytes, err := DataSchemaFlowsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../data/schema/flows.sql", size: 1144, mode: os.FileMode(420), modTime: time.Unix(1521655587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../data/schema/flows.sql": DataSchemaFlowsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"schema": &bintree{nil, map[string]*bintree{
				"flows.sql": &bintree{DataSchemaFlowsSql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

